# Exercícios de Programação Orientada a Objetos (POO) - Kotlin

## 1. Herança

### Exercício 1: Herança e Sobrescrita de Métodos
- Crie uma superclasse `Animal` com um método `fazerSom()`. 
- Crie duas subclasses: `Cachorro` e `Gato`. Ambas as subclasses devem sobrescrever o método `fazerSom()`, emitindo um som característico de cada animal.
- No `main()`, crie instâncias de `Cachorro` e `Gato` e chame o método `fazerSom()` para ver o polimorfismo em ação.

### Exercício 2: Herança com Propriedades
- Crie uma superclasse `Veiculo` com as propriedades `marca` e `modelo`, e um método `informacoes()`.
- Crie duas subclasses: `Carro` e `Moto`, que herdam de `Veiculo` e adicionam uma propriedade adicional específica para cada tipo de veículo, como `capacidade` (para `Carro`) e `tipoDeGuidao` (para `Moto`).
- No `main()`, crie instâncias de `Carro` e `Moto`, e use o método `informacoes()` para exibir as informações dos veículos.

## 2. Polimorfismo

### Exercício 3: Polimorfismo com Interface
- Crie uma interface `Calculadora` com um método `calcular(a: Double, b: Double)`. 
- Implemente essa interface em duas classes: `Soma` e `Multiplicacao`. Cada classe deve implementar o método `calcular` de forma a somar ou multiplicar os valores.
- No `main()`, crie uma função que recebe uma instância de `Calculadora` e a usa para calcular a soma e a multiplicação de dois números.

### Exercício 4: Polimorfismo com Herança
- Crie uma classe abstrata `Forma` com um método abstrato `area()`.
- Crie duas subclasses de `Forma`: `Quadrado` e `Circulo`. Cada classe deve implementar o método `area()` de acordo com a fórmula correspondente.
- No `main()`, crie uma lista de `Forma` contendo objetos de `Quadrado` e `Circulo` e calcule a área de cada um.

## 3. Encapsulamento

### Exercício 5: Encapsulamento de Propriedades
- Crie uma classe `Pessoa` com as propriedades `nome` e `idade`. Torne a propriedade `idade` privada.
- Crie um método `definirIdade()` que valida se a idade está dentro de uma faixa razoável (por exemplo, entre 0 e 120). O método deve ser público.
- No `main()`, crie uma instância de `Pessoa` e tente acessar a propriedade `idade` diretamente. Tente também usar o método `definirIdade()` para alterar a idade.

### Exercício 6: Encapsulamento com Funções de Acesso
- Crie uma classe `ContaBancaria` com as propriedades `saldo` e `titular` (nome do titular). Torne o saldo privado.
- Crie métodos `depositar()` e `sacar()` para modificar o saldo. 
- Adicione um método `consultarSaldo()` para permitir que o titular veja seu saldo, mas sem alterar diretamente a propriedade `saldo`.
- No `main()`, crie uma instância de `ContaBancaria` e use os métodos para realizar operações bancárias.

## 4. Abstração

### Exercício 7: Abstração com Classe Abstrata
- Crie uma classe abstrata `Funcionario` com as propriedades `nome` e `salario`, e um método abstrato `calcularBonus()`.
- Crie duas subclasses: `Gerente` e `Desenvolvedor`. O `Gerente` deve implementar o método `calcularBonus()` aplicando 10% sobre o salário, enquanto o `Desenvolvedor` deve aplicar 5%.
- No `main()`, crie instâncias das duas subclasses e calcule o bônus de cada um.

### Exercício 8: Abstração e Polimorfismo
- Crie uma classe abstrata `InstrumentoMusical` com o método abstrato `tocar()`.
- Crie duas subclasses: `Guitarra` e `Piano`, que implementam o método `tocar()` de maneira diferente.
- No `main()`, crie uma função que recebe um `InstrumentoMusical` e chama o método `tocar()` para mostrar o polimorfismo.

## 5. Funções, Propriedades e Métodos

### Exercício 9: Funções e Propriedades
- Crie uma classe `Produto` com as propriedades `nome` e `preco`. Crie uma função `aplicarDesconto()` que recebe um valor de desconto e aplica esse desconto no preço do produto.
- No `main()`, crie um objeto `Produto`, aplique um desconto e exiba o preço final.

### Exercício 10: Métodos e Propriedades com Interface
- Crie uma interface `Transportavel` com o método `transporte()`.
- Crie duas classes: `Barco` e `Avião`, que implementam o método `transporte()`. No `Barco`, o transporte deve ser por água e no `Avião` por ar.
- No `main()`, crie instâncias de `Barco` e `Avião` e imprima qual o tipo de transporte de cada um usando o método `transporte()`.

## 6. Subclasse e Superclasse

### Exercício 11: Subclasse e Superclasse com Métodos
- Crie uma superclasse `Pessoa` com as propriedades `nome` e `idade`, e um método `informarDados()`.
- Crie uma subclasse `Aluno` que herda de `Pessoa` e adiciona a propriedade `matricula`. 
- No `main()`, crie um objeto `Aluno` e chame o método `informarDados()` para exibir as informações completas.

## 7. Níveis de Acesso (public, private)

### Exercício 12: Modificadores de Acesso
- Crie uma classe `Carro` com as propriedades `modelo` (pública) e `anoDeFabricacao` (privada). 
- Crie métodos para acessar e modificar a propriedade privada `anoDeFabricacao` de forma controlada.
- No `main()`, tente acessar a propriedade `anoDeFabricacao` diretamente e via métodos, e explique os resultados.

---

## Conclusão
Esses exercícios ajudarão você a praticar e solidificar seu conhecimento sobre **Herança**, **Polimorfismo**, **Encapsulamento**, **Abstração**, **Funções**, **Propriedades**, **Métodos**, **Interface**, **Subclasse e Superclasse**, e **Níveis de Acesso** no Kotlin.
